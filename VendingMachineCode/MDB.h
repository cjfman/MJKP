//Multi Drop Bus Library 
//Developed by Charles Franklin for RFID Vending Machine
//Assumes Serial has been initialized
//
//(c) Charles Franklin 2012

/* MDB Glossary
* 
* ACK - acknowlegement byte
* NAK - negative acknowlegement byte
* RET - retransmit byte
* CHK byte - check sum generated by summing  all transmited bytes
*            in a package. Masked with 0xFF
* Poll - Periodic request for information
*
*
*
*
*
* Please look at MDB 4.0 spec for coding specifics
*/

#ifndef MDB_h
#define MDB_h

#include <inttypes.h>
#include "Log.h"

namespace MDB
{
  // State Declarations
  const uint8_t RESET = 0;
  const uint8_t CHANGER = 1;
  const uint8_t READER = 2;
  const uint8_t SETUP = 3;
  const uint8_t WAIT = 4;
  const uint8_t TUBE_STATUS = 5;
  const uint8_t COIN_TYPE = 6;
  const uint8_t NONE = 7;
  const uint8_t DISPENSE = 8;
  const uint8_t POLL = 9;
  const uint8_t STACKER = 10;
  const uint8_t BILL_TYPE = 11;
  const uint8_t COMMAND = 12;
  
  // Global MDB Varialbles
  
  extern unsigned long bill_funds;
  extern unsigned long coin_funds;
  extern unsigned long escrow;

  const uint8_t coin_level = 2;
  
  extern uint8_t state;
  extern uint8_t buffer[28];
  extern uint8_t write_buffer[8];
  
  extern uint8_t reader_state;
  extern uint8_t reader_enable;
  
  extern uint8_t exact_change;
  extern uint8_t coins_only;
  extern boolean money_hold;
  
  extern unsigned long dispense;
  
  // Changer variables
  extern uint8_t changer_state;
  extern uint8_t changer_enable;
  extern uint8_t changer_jam;
  extern uint8_t changer_level;
  extern unsigned int changer_country;
  extern uint8_t changer_scale;
  extern uint8_t changer_decimal;
  extern unsigned int coins_used;
  extern unsigned int coin_value[16];
  extern unsigned int tubes;
  extern uint8_t coin_count[16];
  
  // Changer Command Flags
  extern uint8_t changer_acceptance;
  
  // Reader variables
  extern uint8_t reader_jammed;
  extern uint8_t reader_level;
  extern int reader_country;
  extern int reader_scale;
  extern uint8_t reader_decimal;
  extern int reader_capacity;
  extern int reader_security;
  extern uint8_t reader_escrow;
  extern int bills_used;
  extern unsigned long bill_value[16];
  extern unsigned int bill_count;
  extern uint8_t stacker_full;
  extern uint8_t reader_acceptance;
  
  // Reader command flags
  extern uint8_t stack_bill;
  extern uint8_t return_bill;
  
  //extern uint8_t funds_enable;
  
  
  //uint8_t state;
  //#define changer_enable (state & 0x01)
  //#define reader_enable ((state >> 1) & 0x01)
  
  // Reset and Run Funcitons
  void reset(void);
  void run(void);
  
  // External Command Funtions
  void stack();
  void returnEscrow();
  void giveChange(long);
  void coinReturn();
  void all();
  void none();
  //boolean escrowPresent();
  //unsigned long availableFunds();
  
  // Changer Functions
  void changer(void);
  void changerPoll(void);
  void changerDispense(void);
  void changerReset(void);
  void changerWait(void);
  void changerSetup(void);
  void changerTubeStatus(void);
  void changerCoinType(void);
  uint8_t coinWithValue(uint8_t);
  int changerErrorCheck(uint8_t);
  void resetChanger(void);
  
  // Reader Functions
  void reader();
  void readerPoll();
  void readerCommand();
  void readerReset();
  void readerWait();
  void readerSetup();
  void readerStacker();
  void readerBill();
  void resetReader();
  int readerErrorCheck(uint8_t end);
  
  // Serial Functions
  void command(uint8_t);
  void command(uint8_t, uint8_t);
  int read(void);
  int timeout(void);
}
  
#endif
